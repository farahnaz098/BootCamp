# -*- coding: utf-8 -*-
"""Advanced_Data_Manipulation_and_Visualization.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1QTbJbbwa4WY6wukr2DLuoapPzD1SQhZe

# Advanced Data Manipulation and Visualization

This notebook is dedicated to practicing different tasks with pandas, numpy and matplotlib.

It should be noted there may be more than one different way to answer a question or complete an exercise.

Different tasks will be detailed by comments or text.

For further reference and resources, it's advised to check out the [pandas documentation](https://pandas.pydata.org/pandas-docs/stable/).
"""

# Import pandas
import pandas as pd

# Create a series of three different colours
colors = pd.Series(["Blue", "Red", "White"])

# View the series of different colours
colors

# Create a series of three different car types and view it
cars = pd.Series(["Sedan", "SUV", "Hatchback"])
cars

# Combine the Series of cars and colours into a DataFrame
df = pd.DataFrame({"Car Types": cars, "Colors": colors})
df

# Import "/data/car-sales.csv" and turn it into a DataFrame
car_sales = pd.read_csv("/content/data/car-sales.csv")
car_sales

from google.colab import drive
drive.mount('/content/drive')

"""**Note:** Since you've imported `../data/car-sales.csv` as a DataFrame, we'll now refer to this DataFrame as 'the car sales DataFrame'.

"""

# Export the DataFrame you created to a .csv file
car_sales.to_csv("exported-car-sales.csv", index=False)

# Find the different datatypes of the car data DataFrame
car_sales.dtypes

# Describe your current car sales DataFrame using describe()
car_sales.describe()

# Get information about your DataFrame using info()
car_sales.info()

"""What does it show you?

"""

# Create a Series of different numbers and find the mean of them
series = pd.Series([999, 22203, 43920])
series.mean()

# Create a Series of different numbers and find the sum of them
series = pd.Series([12,3,44,567])
series.sum()

# List out all the column names of the car sales DataFrame
car_sales.columns

# Find the length of the car sales DataFrame , hint: len()
len(car_sales)

# Show the first 5 rows of the car sales DataFrame, hint: head()
car_sales.head()

# Show the first 7 rows of the car sales DataFrame
car_sales.head(7)

# Show the bottom 5 rows of the car sales DataFrame
car_sales.tail()

# Use .loc to select the row at index 3 of the car sales DataFrame
car_sales.loc[3,]

# Use .iloc to select the row at position 3 of the car sales DataFrame
car_sales.iloc[3,]

"""Notice how they're the same? Why do you think this is?

Check the pandas documentation for [.loc](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.loc.html) and [.iloc](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.iloc.html). Think about a different situation each could be used for and try them out.

"""

# Select the "Odometer (KM)" column from the car sales DataFrame
car_sales["Odometer (KM)"]

# Find the mean of the "Odometer (KM)" column in the car sales DataFrame
car_sales["Odometer (KM)"].isnull().sum()
car_sales["Odometer (KM)"].mean()

# Select the rows with over 100,000 kilometers on the Odometer
car_sales[car_sales["Odometer (KM)"] > 100000]

# Create a crosstab of the Make and Doors columns
pd.crosstab(car_sales["Make"], car_sales["Doors"])

# Group columns of the car sales DataFrame by the Make column and find the average
car_sales.groupby("Make").mean(numeric_only=True)

# Change the datatype of the Price column to integers
# car_sales["Price"] = car_sales["Price"].astype(int)
# car_sales["Price"].info()
car_sales["Price"] = car_sales["Price"].apply(lambda x: int(float(x.replace("$", "").replace(",", ""))))

"""Now let's deal with missing data.

"""

# Import the car sales DataFrame with missing data ("/data/car-sales-missing-data.csv")

car_sales_missing = pd.read_csv("/content/data/car-sales-missing-data.csv")
# Check out the new DataFrame
car_sales_missing

"""Notice the missing values are represented as `NaN` in pandas DataFrames.

Let's try fill them.

"""

# Fill the Odometer column missing values with the mean of the column inplace
car_sales_missing["Odometer"].fillna(car_sales_missing["Odometer"].mean(),inplace=True)
print(car_sales_missing["Odometer"].isnull().sum())

# View the car sales missing DataFrame and verify the changes
car_sales.isnull().sum()

# Remove the rest of the missing data inplace
car_sales_missing.dropna(inplace=True)

# Verify the missing values are removed by viewing the DataFrame

car_sales_missing.isnull().sum()

"""We'll now start to add columns to our DataFrame.

"""

# Create a "Seats" column where every row has a value of 5
car_sales["Seats"] = 5
car_sales

# Create a column called "Engine Size" with random values between 1.3 and 4.5
# Remember: If you're doing it from a Python list, the list has to be the same length
# as the DataFrame
import numpy as np
car_sales["Engine Size"] = pd.Series(np.random.randint(13,46,len(car_sales)))
car_sales

# Create a column which represents the price of a car per kilometer
# Then view the DataFrame
car_sales['Price_per_Kilometer'] = car_sales['Price'] / car_sales['Odometer (KM)']
car_sales

# Remove the last column you added using .drop()
car_sales.drop(columns="Price_per_Kilometer" ,inplace=True)

# Change the title of the Odometer (KM) to represent miles instead of kilometers
car_sales.rename(columns={"Odometer (KM)": "Odometer (Miles)"}, inplace=True)
car_sales

"""# Numpy Operations

"""

# Import NumPy as its abbreviation 'np'
import numpy as np

# Create a 1-dimensional NumPy array using np.array()
a1 = np.array([1,2,3])

# Create a 2-dimensional NumPy array using np.array()
a2 = np.array([[1,2,3],
               [4,5,6]])


# Create a 3-dimensional Numpy array using np.array()
a3 = np.array([
  [[1, 2, 3],
   [3, 2, 1]],

  [[4, 5, 6],
   [7, 8, 9]]
])

"""Now we've you've created 3 different arrays, let's find details about them.

Find the shape, number of dimensions, data type, size and type of each array.

"""

# Attributes of 1-dimensional array | number of dimensions, data type, size and type)
# (shape, ndim, dtype, size, type())
a2.shape, a3.ndim, a2.dtype, a2.size, type(a2)

# Attributes of 2-dimensional array
a2.shape , a2.ndim ,a2.dtype , a2.size , type(a2)

# Attributes of 3-dimensional array
a3.shape , a3.ndim , a3.dtype , a3.size , type(a3)

# Import pandas and create a DataFrame out of one
# of the arrays you've created
import pandas as pd

df  = pd.DataFrame(a2)

df

# Create an array of shape (10, 2) with only ones
a = np.random.randint(0,20,size=(10,2))
a.shape

# Create an array of shape (7, 2, 3) of only zeros
a = np.zeros((7,2,3))
a

# Create an array within a range of 0 and 100 with step 3
a = np.arange(0,100,3)

# Create a random array with numbers between 0 and 10 of size (7, 2)
n = np.random.randint(0,10,size=(7,2))
n

# Create a random array of floats between 0 & 1 of shape (3, 5)
n = np.random.random((3,5))
n

# Set the random seed to 42
np.random.seed(42)

# Create a random array of numbers between 0 & 10 of size (4, 6)
n = np.random.randint(0,10,size=(4,6))
n

"""Run the cell above again, what happens?

Are the numbers in the array different or the same? Why do think this is?

"""

# Create an array of random numbers between 1 & 10 of size (3, 7)
# and save it to a variable
n = np.random.randint(1,10,size=(3,7))
n
# Find the unique numbers in the array you just created
np.unique(n)


# Find the unique numbers in the array you just created

# Find the 0'th index of the latest array you created
n[0]

# Get the first 2 rows of latest array you created
n[:2]

# Get the first 2 values of the first 2 rows of the latest array
n[:2,:2]

# Create a random array of numbers between 0 & 10 and an array of ones
# both of size (3, 5), save them both to variables
a = np.random.randint(0,10,size=(3,5))
b = np.ones((3,5))

# Add the two arrays together
a = np.random.randint(0,10,size=(2,5))
b = np.random.randint(10,20,size=(2,5))

c = a+b

# Create another array of ones of shape (5, 3)
d = np.ones((5,3))

# Try add the array of ones and the other most recent array together
d = c+d

"""When you try the last cell, it produces an error. Why do think this is?

How would you fix it?

"""

# Create another array of ones of shape (3, 5)
new = np.ones((3,5))
new

# Subtract the new array of ones from the other most recent array
c= c.reshape(3,5)
c = c-new
c

# Multiply the ones array with the latest array
c = c*new
c

# Take the latest array to the power of 2 using '**'
c = c**2
c

# Do the same thing with np.square()
c = np.square(c)
c

# Find the mean of the latest array using np.mean()
np.mean(c)

# Find the maximum of the latest array using np.max()c.max()
c= np.random.randint(1,10,(2,5))
print("np.max",np.max(c))
print(c.max())

# Find the minimum of the latest array using np.min()
np.mean(c)

# Find the standard deviation of the latest array
np.std(c)

# Find the variance of the latest array
np.var(c)

# Reshape the latest array to (3, 5, 1)
c.reshape(2,5,1)

# Transpose the latest array

cT = c.T
cT

"""What does the transpose do?

"""

# Create two arrays of random integers between 0 to 10
# one of size (3, 3) the other of size (3, 2)

a1 = np.random.randint(0,10,size=(3,3))
a2 = np.random.randint(0,10,size=(3,2))

# Perform a dot product on the two newest arrays you created
a3 = np.dot(a1,a2)

# Create two arrays of random integers between 0 to 10
import numpy as np
# both of size (4, 3)

a = np.random.randint(0,10,size=(4,3))
b = np.random.randint(0,10,size=(4,3))

c = np.dot(a,b.T)
c

"""It doesn't work. How would you fix it?

"""

# Take the latest two arrays, perform a transpose on one of them and then perform
# a dot product on them both

a = np.random.randint(0,10,size=(4,3))
b = np.random.randint(0,10,size=(4,3))
c = np.dot(a,b.T)

"""Notice how performing a transpose allows the dot product to happen.

Why is this?

Checking out the documentation on [`np.dot()`](https://docs.scipy.org/doc/numpy/reference/generated/numpy.dot.html) may help, as well as reading [Math is Fun's guide on the dot product](https://www.mathsisfun.com/algebra/vectors-dot-product.html).

Let's now compare arrays.

"""

# Create two arrays of random integers between 0 & 10 of the same shape
# and save them to variables

a = np.random.randint(0,10,size=(3,4))
b = np.random.randint(0,10,size=(3,4))

# Compare the two arrays with '>'
c = a>b
c

"""What happens when you compare the arrays with `>`?

"""

# Compare the two arrays with '>='
c = a>=b
c

# Find which elements of the first array are greater than 7
c  =a>7
c

# Which parts of each array are equal? (try using '==')

c = a==b
c

# Sort one of the arrays you just created in ascending order
b = np.sort(b)
b

# Sort the indexes of one of the arrays you just created
np.argsort(b)
b

# Find the index with the maximum value in one of the arrays you've created
maxindice = np.argmax(b)
maxindice

# Find the index with the minimum value in one of the arrays you've created
minindice = np.argmin(b)
minindice

# Find the indexes with the maximum values down the 1st axis (axis=1)
# of one of the arrays you created
max_indices= np.argmax(b,axis=1)
max_indices

# Find the indexes with the minimum values across the 0th axis (axis=0)
# of one of the arrays you created
min_indices = np.argmin(b, axis=1)
min_indices

# Create an array of normally distributed random numbers
a = np.random.randn(3,5)
a

# Create an array with 10 evenly spaced numbers between 1 and 100
b = np.linspace(1,100,10)
b

"""#Data Visulization with Matplotlib

"""

# Commented out IPython magic to ensure Python compatibility.
# Import the pyplot module from matplotlib as plt and make sure
# plots appear in the notebook using '%matplotlib inline'
# %matplotlib inline
import matplotlib.pyplot as plt

# Create a simple plot using plt.plot()
plt.plot()

# Plot a single Python list

# Create two lists, one called X, one called y, each with 5 numbers in them

# Plot X & y (the

"""There's another way to create plots with Matplotlib, it's known as the object-orientated (OO) method. Let's try it.

"""

# Create a plot using plt.subplots()
fig, ax = plt.subplots()

# Create a plot using plt.subplots() and then add X & y on the axes
fig, ax = plt.subplots()
ax.plot(X, y)

"""Now let's try a small matplotlib workflow.

"""

# Import and get matplotlib ready
import matplotlib.pyplot as plt


# Prepare data (create two lists of 5 numbers, X & y)
x = [4,6,20,25]
y = [90,56,13,45]


# Setup figure and axes using plt.subplots()
fig , ax = plt.subplots()


# Add data (X, y) to axes
ax.plot(x,y)


# Customize plot by adding a title, xlabel and ylabel
ax.set(title="Sample simple plot",
       xlabel="x-axis",
       ylabel="y-axis")

# Save the plot to file using fig.savefig()
fig.savefig("/images/simple-plot.png")

"""Okay, this is a simple line plot, how about something a little different?

To help us, we'll import NumPy.

"""

# Import NumPy as np
import numpy as np

# Create an array of 100 evenly spaced numbers between 0 and 100 using NumPy and save it to variable X
a = np.linspace(0,100)
a

# Create a plot using plt.subplots() and plot X versus X^2 (X squared
fig , ax = plt.subplots()
ax.plot(a,a**2)
ax.set(title="a squared",
       xlabel="x-axis",
       ylabel="y-axis")

"""We'll start with scatter plots.

"""

# Create a scatter plot of X versus the exponential of X (np.exp(X))
fig, ax = plt.subplots()
ax.scatter(X, np.exp(X))

# Create a scatter plot of X versus np.sin(X)
fig ,ax = plt.subplots()
ax.scatter(X,np.sin(X))

"""How about we try another type of plot? This time let's look at a bar plot. First we'll make some data.

"""

# Create a Python dictionary of 3 of your favourite foods with


# The keys of the dictionary should be the food name and the values their price

# Create a bar graph where the x-axis is the keys of the dictionary
# and the y-axis is the values of the dictionary
fig, ax = plt.subplots()
ax.bar(fav_food.keys(), fav_food.values())

# Add a title, xlabel and ylabel to the plot
ax.set(title="My favourite foods",
       xlabel="Food",
       ylabel="Price in Rs.")

# Make the same plot as above, except this time make the bars go horizontal, hint: use barh
fig ,ax = plt.subplots()
ax.barh(fav_food.keys(), fav_food.values())
ax.set(title="My favourite foods",
       xlabel="Food",
       ylabel="Price in Rs.")

"""All this food plotting is making me hungry. But we've got a couple of plots to go.

Let's see a histogram.

"""

# Create a random NumPy array of 1000 normally distributed numbers using NumPy and save it to X
X = np.random.randn(1000)


# Create a histogram plot of X
plt.hist(X,bins=20)

# Create a NumPy array of 1000 random numbers and save it to X
X = np.random.randn(1000)


# Create a histogram plot of X
plt.hist(X,bins=20)

"""Notice how the distributions (spread of data) are different. Why do they differ?

What else can you find out about the normal distribution?

Can you think of any other kinds of data which may be normally distributed?

These questions aren't directly related to plotting or Matplotlib but they're helpful to think of.

Now let's try make some subplots. A subplot is another name for a figure with multiple plots on it.

"""

# Create an empty subplot with 2 rows and 2 columns (4 subplots total)
fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(nrows=2,
                                             ncols=2)

"""Notice how the subplot has multiple figures. Now let's add data to each axes.

"""

# Create the same plot as above with 2 rows and 2 columns and figsize of (10, 5)
fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(nrows=2,
                                             ncols=2,
                                             figsize=(10, 5))


# Plot X versus X/2 on the top left axes
ax1.plot(X, X/2)


# Plot a scatter plot of 10 random numbers on each axis on the top right subplot
ax2.scatter(np.random.random(10), np.random.random(10))


# Plot a bar graph of the favourite food keys and values on the bottom left subplot
ax3.bar(fav_food.keys(), fav_food.values())


# Plot a histogram of 1000 random normally distributed numbers on the bottom right subplot
ax4.hist(np.random.randn(1000))

"""Woah. There's a lot going on there.

Now we've seen how to plot with Matplotlib and data directly. Let's practice using Matplotlib to plot with pandas.

First we'll need to import pandas and create a DataFrame work with.

"""

# Import pandas as pd
import pandas as pd

# Import the '/data/car-sales.csv' into a DataFame called car_sales and view
car_sales = pd.read_csv("car-sales.csv")

# Try to plot the 'Price' column using the plot() function
price = car_sales["Price"]
price.plot()

"""Why doesn't it work?

Hint: It's not numeric data.

In the process of turning it to numeric data, let's create another column which adds the total amount of sales and another one which shows what date the car was sold.

Hint: To add a column up cumulatively, look up the cumsum() function. And to create a column of dates, look up the date_range() function.

"""

# Remove the symbols, the final two numbers from the 'Price' column and convert it to numbers
car_sales["Price"] = car_sales["Price"].str.replace("[\$\,\.]", "")
car_sales["Price"] = car_sales["Price"].str[:-2]

# Add a column called 'Total Sales' to car_sales which cumulatively adds the 'Price' column
car_sales["Price"] = car_sales["Price"].str.replace('$', '', regex=False).str.replace(',', '', regex=False).astype(int)


car_sales["Sale Date"] = pd.date_range("2020-01-13", periods=len(car_sales))


# View the car_sales DataFrame
car_sales

"""Now we've got a numeric column (`Total Sales`) and a dates column (`Sale Date`), let's visualize them.

"""

# Use the plot() function to plot the 'Sale Date' column versus the 'Total Sales' column
car_sales["Sale Date"].plot()

# Convert the 'Price' column to the integers
# write code here
car_sales['Price'] = car_sales["Price"].astype(int)

# Create a scatter plot of the 'Odometer (KM)' and 'Price' column using the plot() function
car_sales.plot(x="Odometer (KM)", y="Price", kind="scatter")

# Create a NumPy array of random numbers of size (10, 4) and save it to X
X = np.random.rand(10,4)


# Turn the NumPy array X into a DataFrame with columns called ['a', 'b', 'c', 'd']
df = pd.DataFrame(X, columns=['a', 'b', 'c', 'd'])


# Create a bar graph of the DataFrame
df.plot(kind="bar")

# Create a bar graph of the 'Make' and 'Odometer (KM)' columns in the car_sales DataFrame
car_sales.plot(x="Make", y="Odometer (KM)", kind="bar")

# Create a histogram of the 'Odometer (KM)' column
car_sales["Odometer (KM)"].plot(kind="hist")

# Create a histogram of the 'Price' column with 20 bins
car_sales["Price"].plot(kind="hist", bins=20)

"""Now we've seen a few examples of plotting directly from DataFrames using the `car_sales` dataset.

Let's try using a different dataset.

"""

# Import "/data/heart-disease.csv" and save it to the variable "heart_disease"
heart_disease = pd.read_csv("heart-disease.csv")

# View the first 10 rows of the heart_disease DataFrame
heart_disease.head(10)

# Create a histogram of the "age" column with 50 bins
heart_disease["age"].plot(kind="hist", bins=50)

# Call plot.hist() on the heart_disease DataFrame and toggle the
# "subplots" parameter to True
heart_disease.plot.hist(subplots=True)

"""That plot looks pretty squished. Let's change the figsize.

"""

# Call the same line of code from above except change the "figsize" parameter
# to be (10, 30)
heart_disease.plot.hist(subplots=True, figsize=(10, 30))

"""Now let's try comparing two variables versus the target variable.

More specifially we'll see how age and cholesterol combined effect the target in **patients over 50 years old**.

For this next challenge, we're going to be replicating the following plot:

<img src="../images/matplotlib-heart-disease-chol-age-plot.png"/>

"""

# Replicate the above plot in whichever way you see fit

# Plot histograms of all numeric columns in heart_disease
heart_disease.plot.hist(subplots=True, figsize=(10, 30), bins=20)

# Note: The method below is only one way of doing it, yours might be
# slightly different
over_50 = heart_disease[heart_disease["age"] > 50]



# Create DataFrame with patients over 50 years old


# Create the plot
fig, ax = plt.subplots(figsize=(10, 6))

# Plot the data
scatter = ax.scatter(over_50["age"],
                     over_50["chol"],
                     c=over_50["target"])


# Customize the plot
ax.set(title="Heart Disease and Cholesterol Levels",
       xlabel="Age",
       ylabel="Cholesterol");
ax.legend(*scatter.legend_elements(), title="Target")

# Add a meanline
ax.axhline(over_50["chol"].mean(),
           linestyle="--");

"""Beatiful, now you've created a plot of two different variables, let's change the style.

"""

# Save the current figure using savefig(), the file name can be anything you want
fig.savefig("heart_disease_scatter.png")

# Reset the figure by calling plt.subplots()
fig, ax = plt.subplots()

