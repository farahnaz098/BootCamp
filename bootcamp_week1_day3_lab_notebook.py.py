# -*- coding: utf-8 -*-
"""Bootcamp_Week1_Day3_Lab_Notebook (3) (1).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1FUkuIKhT0wFdgqv7-xiFEzJKMUIlrw-A

# Week 1 - Day 3 Lab: Data & Matrix Manipulation
In this lab, you'll work with a realistic weather dataset. You'll use **Pandas** to explore and clean the data, and **NumPy** to perform matrix operations.

**Dataset:** `hourly_weather_10_days.csv` (10 days of hourly weather data)

## Step 1: Load the Data
- Use Pandas to load the CSV file
- Display the first few rows
- Check the number of rows and columns
"""

# TODO: Load the data into a DataFrame
import pandas as pd

# Replace the file path if needed
df = pd.read_csv('hourly_weather_10_days.csv')
df.head()

from google.colab import drive
drive.mount('/content/drive')

"""## Step 2: Basic Exploration
- Check column names and data types
- Display basic statistics using `.describe()`
- Count missing values in each column
"""

# TODO: Explore the DataFrame
#Check column names and data types

print(df.info())

#Display basic statistics using .describe()
print(df.describe())

#Count missing values in each column
print(df.isna().sum())

#Check the number of rows and columns
df.shape

"""## Step 3: Handle Missing Values
- Drop or fill missing values
- Justify your approach (e.g., fill with mean, forward fill, etc.)
"""

# TODO: Fill missing values
# Example: df['column'] = df['column'].fillna(df['column'].mean())

# Fill in your logic here
# Now fill missing values

# fill string values with mode
df['timestamp']= df['timestamp'].fillna(df['timestamp'].mode())

#Fill integer values with mean
df['temperature_C']= df['temperature_C'].fillna(df['temperature_C'].mean())

df['humidity_%']= df['humidity_%'].fillna(df['humidity_%'].mean())
df['wind_speed_kmph']= df['wind_speed_kmph'].fillna(df['wind_speed_kmph'].mean())
df['pressure_hPa']= df['pressure_hPa'].fillna(df['pressure_hPa'].mean())
df['visibility_km']= df['visibility_km'].fillna(df['visibility_km'].mean())

#Now again checking for missing values
print(df.isna().sum())

"""## Step 4: Data Analysis
- Calculate daily average temperature
- Find max, min, mean for each metric
- Which hour of the day is the most humid on average?
"""

# TODO: Perform analysis
# Use groupby, aggregation, and filtering functions
metrics = ['temperature_C', 'humidity_%', 'wind_speed_kmph']

# Compute summary statistics (min, max, mean)
summary_stats = df[metrics].agg(['min', 'max', 'mean'])
print(summary_stats.T)  # Transposed for easier readability

# Group by 'hour' and calculate average humidity
avg_humidity_by_hour = df.groupby('hour')['humidity_%'].mean()

# Find the hour with the max average humidity
most_humid_hour = avg_humidity_by_hour.idxmax()
max_avg_humidity = avg_humidity_by_hour.max()

print(f"Most humid hour on average: {most_humid_hour}:00 with average humidity {max_avg_humidity:.2f}%")
# Placeholder example:
# df['timestamp'] = pd.to_datetime(df['timestamp'])
# df['hour'] = df['timestamp'].dt.hour
# avg_humidity_by_hour = df.groupby('hour')['humidity_%'].mean()

"""## Step 5: NumPy Matrix Exercises
Convert relevant DataFrame columns into NumPy arrays and perform matrix operations.
"""

# TODO: Extract temperature and wind_speed as NumPy arrays
import numpy as np

temp = df['temperature_C'].to_numpy()
wind = df['wind_speed_kmph'].to_numpy()

print("Temperature (°C):", temp)
print("Wind Speed (km/h):", wind)

"""### a) Reshape into matrix form
- Assume each row is a day
- Reshape temperature into a (10, 24) matrix
- Calculate daily min, max, and mean using axis-based operations
"""

# TODO: Reshape and aggregate
# Hint: temp_matrix = temp.reshape((10, 24))
# Write functions to find min, max, mean across rows

# Calculate daily min, max, and mean

import numpy as np


temp_matrix = temp.reshape(10, 24)
wind_matrix = wind.reshape(10, 24)

def basic_aggregates(matrix):

    row_min = np.min(matrix, axis=1)
    row_max = np.max(matrix, axis=1)
    row_mean = np.mean(matrix, axis=1)
    return row_min, row_max, row_mean

# Apply function to temperature data
min_temps, max_temps, mean_temps = basic_aggregates(temp_matrix)

# Print results
print("Daily Min Temperatures:", min_temps)
print("Daily Max Temperatures:", max_temps)
print("Daily Mean Temperatures:", mean_temps)

"""### b) Normalize the temperature matrix
- Subtract the mean and divide by std deviation
- Do it manually using NumPy functions
"""

# TODO: Normalize temp_matrix
# Placeholder for function: def normalize(matrix):
# return ...

# Apply it to temp_matrix

"""### c) Apply custom mask/filter
- Create a mask for wind speed > 15 kmph
- Use it to extract high-wind readings
"""

# TODO: Create boolean mask and filter wind speeds
# mask = wind > 15
# high_wind = wind[mask]

# Function to normalize the matrix
def normalize(matrix):

    mean = np.mean(matrix, axis=0)
    std = np.std(matrix, axis=0)


    normalized_matrix = (matrix - mean) / std

    return normalized_matrix

# Normalize the temp_matrix
normalized_temp_matrix = normalize(temp_matrix)

# Print the normalized temperature matrix
print("Normalized Temperature Matrix:")
print(normalized_temp_matrix)

"""## Final Challenge: Write Your Own Function
Write a function `daily_summary(matrix)` that takes a NumPy matrix of shape (10, 24) and returns a summary dictionary for each day.
"""

# TODO: Write and test your function
def daily_summary(matrix):
    # return list of dicts with min, max, mean
    pass

# Example usage:
# summaries = daily_summary(temp_matrix)

def daily_summary(matrix):
    # Initialize an empty list to store the daily summaries
    summaries = []

    # Loop through each row (each day)
    for day in matrix:
        # Calculate min, max, and mean for the current day
        day_summary = {
            'min': np.min(day),
            'max': np.max(day),
            'mean': np.mean(day)
        }
        # Append the dictionary to the summaries list
        summaries.append(day_summary)

    return summaries

# Example usage:
summaries = daily_summary(temp_matrix)

# Print the daily summaries
print("Daily Summaries (Min, Max, Mean):")
for i, summary in enumerate(summaries, 1):
    print(f"Day {i}: {summary}")

"""## ✅ Submit your notebook once complete.
- Add comments where necessary
"""